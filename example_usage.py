#!/usr/bin/env python3
"""
Exemple d'utilisation pratique de DocPilot Agent
Jour 5: Agent + CLI/mini-UI & Qualit√©
"""

import asyncio
import os
from pathlib import Path
import sys

# Add current directory to Python path for imports
sys.path.append(str(Path(__file__).parent))

from knowledge_copilot.agent import create_agent, SearchFilter


async def demo_basic_usage():
    """D√©monstration d'utilisation basique"""
    print("üöÅ DocPilot Agent - D√©monstration d'utilisation")
    print("=" * 60)
    
    # Configuration
    mcp_url = os.getenv("MCP_URL", "http://localhost:8000")
    
    # Cr√©er l'agent
    agent = create_agent(
        mcp_url=mcp_url,
        llm_provider="openai",  # ou "vertex"
        openai_api_key=os.getenv("OPENAI_API_KEY"),
        project_id=os.getenv("PROJECT_ID")
    )
    
    print(f"üîó Connect√© au service MCP: {mcp_url}")
    
    # V√©rifier l'√©tat du syst√®me
    health = await agent.health_check()
    print(f"üè• √âtat du syst√®me: {health.get('status', 'unknown')}")
    
    if health.get("status") != "healthy":
        print("‚ùå Le syst√®me n'est pas op√©rationnel. V√©rifiez votre service MCP.")
        return
    
    # Exemple 1: Question simple
    print(f"\nüìù Exemple 1: Question simple")
    print("-" * 30)
    
    response = await agent.ask("Comment d√©ployer une application sur Cloud Run ?")
    
    print(f"Question: Comment d√©ployer une application sur Cloud Run ?")
    print(f"R√©ponse ({response.response_time:.3f}s):")
    print(f"  {response.answer[:200]}...")
    print(f"  üìÑ {len(response.sources)} sources trouv√©es")
    print(f"  üîç {response.chunks_scanned} chunks analys√©s")
    print(f"  üÜî Trace ID: {response.trace_id}")
    
    # Exemple 2: Avec filtres
    print(f"\nüìù Exemple 2: Avec filtres GitHub")
    print("-" * 30)
    
    filters = SearchFilter(
        source="github",
        mime="text/markdown",
        top_k=5,
        similarity_threshold=0.7
    )
    
    response = await agent.ask("Configuration Docker", filters)
    
    print(f"Question: Configuration Docker")
    print(f"Filtres: source=github, mime=text/markdown, top_k=5")
    print(f"R√©ponse ({response.response_time:.3f}s):")
    print(f"  {response.answer[:200]}...")
    print(f"  üìÑ {len(response.sources)} sources trouv√©es")
    
    if response.sources:
        print("  üè∑Ô∏è  Top sources:")
        for i, source in enumerate(response.sources[:3], 1):
            print(f"    {i}. {source['title'][:50]}... (sim: {source['similarity_score']:.3f})")
    
    # Exemple 3: Repository sp√©cifique
    print(f"\nüìù Exemple 3: Repository sp√©cifique")
    print("-" * 30)
    
    filters = SearchFilter(
        repo="docpilot",  # Remplacez par un repo r√©el
        top_k=10
    )
    
    response = await agent.ask("API endpoints disponibles", filters)
    
    print(f"Question: API endpoints disponibles")
    print(f"Filtres: repo=docpilot, top_k=10")
    print(f"R√©ponse ({response.response_time:.3f}s):")
    print(f"  Fallback utilis√©: {'Oui' if response.fallback_used else 'Non'}")
    
    if not response.fallback_used:
        print(f"  {response.answer[:200]}...")
    else:
        print(f"  {response.answer}")
    
    # Statistiques de session
    print(f"\nüìä Statistiques de session")
    print("-" * 30)
    
    stats = agent.get_observability_stats()
    session_stats = stats["session_stats"]
    
    print(f"Total requ√™tes: {session_stats['total_requests']}")
    print(f"Requ√™tes r√©ussies: {session_stats['successful_requests']}")
    print(f"Temps moyen de r√©ponse: {session_stats.get('avg_response_time', 0):.3f}s")
    print(f"Temps moyen de recherche: {session_stats.get('avg_search_time', 0):.3f}s")
    print(f"Temps moyen LLM: {session_stats.get('avg_llm_time', 0):.3f}s")
    print(f"Taux de succ√®s: {session_stats.get('success_rate', 0):.1%}")
    print(f"Taux de fallback: {session_stats.get('fallback_rate', 0):.1%}")
    
    # Historique des requ√™tes r√©centes
    if stats["recent_requests"]:
        print(f"\nüïê Requ√™tes r√©centes:")
        for req in stats["recent_requests"]:
            print(f"  ‚Ä¢ {req['question']} ({req['response_time']:.3f}s)")
    
    # Nettoyage
    await agent.close()
    print(f"\n‚úÖ D√©monstration termin√©e!")


async def demo_conversation_flow():
    """D√©monstration d'un flux de conversation"""
    print(f"\nüó£Ô∏è  Simulation d'une conversation")
    print("=" * 60)
    
    agent = create_agent(
        mcp_url=os.getenv("MCP_URL", "http://localhost:8000"),
        llm_provider="openai",
        openai_api_key=os.getenv("OPENAI_API_KEY")
    )
    
    # Conversation simul√©e
    conversation = [
        {
            "user": "Comment d√©ployer sur Cloud Run ?",
            "filters": SearchFilter(source="github", top_k=5)
        },
        {
            "user": "Quels sont les pr√©requis Docker ?",
            "filters": SearchFilter(mime="text/markdown", top_k=3)
        },
        {
            "user": "Comment configurer les variables d'environnement ?",
            "filters": SearchFilter(top_k=7)
        }
    ]
    
    print(f"Simulation d'une conversation avec {len(conversation)} messages:")
    
    for i, turn in enumerate(conversation, 1):
        print(f"\n--- Tour {i} ---")
        print(f"üë§ Utilisateur: {turn['user']}")
        
        response = await agent.ask(turn["user"], turn["filters"])
        
        print(f"ü§ñ Assistant ({response.response_time:.3f}s): ", end="")
        
        if response.fallback_used:
            print("‚ö†Ô∏è  Informations insuffisantes")
        else:
            answer_preview = response.answer[:150] + "..." if len(response.answer) > 150 else response.answer
            print(f"{answer_preview}")
        
        print(f"   üìä {response.chunks_scanned} chunks | {len(response.sources)} sources")
    
    await agent.close()


def demo_cli_examples():
    """Exemples d'utilisation CLI"""
    print(f"\nüñ•Ô∏è  Exemples CLI")
    print("=" * 60)
    
    examples = [
        {
            "description": "Question basique",
            "command": 'python cli.py ask "Comment d√©ployer sur Cloud Run ?"'
        },
        {
            "description": "Filtrage par source GitHub",
            "command": 'python cli.py ask "Configuration Docker" --source github --top-k 5'
        },
        {
            "description": "Filtrage par type de fichier",
            "command": 'python cli.py ask "API documentation" --mime text/markdown --threshold 0.8'
        },
        {
            "description": "Repository sp√©cifique",
            "command": 'python cli.py ask "Installation guide" --repo my-project'
        },
        {
            "description": "Format JSON",
            "command": 'python cli.py ask "Deployment process" --format json'
        },
        {
            "description": "Utilisation de Vertex AI",
            "command": 'python cli.py ask "ML pipeline" --llm vertex --project-id my-gcp-project'
        },
        {
            "description": "V√©rification de sant√©",
            "command": 'python cli.py health --verbose'
        }
    ]
    
    for example in examples:
        print(f"\nüí° {example['description']}:")
        print(f"   {example['command']}")
    
    print(f"\nüåê Interface web:")
    print(f"   streamlit run streamlit_app.py")


def main():
    """Point d'entr√©e principal"""
    print("üöÅ DocPilot Agent - Exemples d'utilisation compl√®te")
    print("=" * 70)
    
    # V√©rification de la configuration
    if not os.getenv("MCP_URL"):
        print("‚ùå Variable MCP_URL non d√©finie!")
        print("   export MCP_URL=http://localhost:8000")
        return
    
    if not os.getenv("OPENAI_API_KEY") and not os.getenv("PROJECT_ID"):
        print("‚ùå Aucune cl√© LLM configur√©e!")
        print("   Pour OpenAI: export OPENAI_API_KEY=your_key")
        print("   Pour Vertex: export PROJECT_ID=your_project")
        return
    
    print("‚úÖ Configuration d√©tect√©e, d√©marrage des exemples...")
    
    # Ex√©cuter les d√©monstrations
    asyncio.run(demo_basic_usage())
    asyncio.run(demo_conversation_flow())
    demo_cli_examples()
    
    print(f"\nüéâ Tous les exemples termin√©s!")
    print(f"\nPour utiliser DocPilot:")
    print(f"  üì± CLI: python cli.py ask \"Votre question\"")
    print(f"  üåê Web: streamlit run streamlit_app.py")
    print(f"  üß™ Tests: python test_agent.py")


if __name__ == "__main__":
    main()